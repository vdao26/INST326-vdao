AI Usage Journal
Vivian Dao
vdao@terpmail.umd.edu
Section 0203

Week 1
This week, I used AI to explain to me how to make my github 
respository public, so that the TAs can access my journals and other
assignments on GitHub. I used specifically Gemini to help me. Gemini 
told me to go to Github.com, click on my respository, go to settings, and 
scroll all the way at the bottom where it says "danger zone", and change
visibility to public.

Other than that, I have not used AI in this class as I am 
trying to review Python by myself because I have some experience with it.
I want to test my memory of what I learned in other Python classes 
and INST126.

Week 2
This week, I used AI to reinforce my knowledge of for loops and if/else statements.
I am familiar with both but I struggle to understand for loops more. Here is the link to what I asked
Claude AI. I do not use while loops often so I also wanted to see what was the difference between a for loop and while 
loop. https://claude.ai/share/ced870ee-a7b5-49be-9e3c-1f56beed6b95

While I was working on Week 2 exercises, I found myself using while loops and it helped me practice what I learned from Claude.
As in for for loops, I think it depends on what the prompt is asking. Sometimes it can be a bit confusing but once I disect the prompt
I know how the for loop work.


Week 3
This week we learned about writing functions, which I have prior knowledge because I took INST126 last year, 
but I was still a little confused about the return statement and where to write it in the function. I
used Claude.AI to help explain what the return statement does https://claude.ai/share/49ad0101-5258-4450-adb8-c431f218d089 

I learned that return statements can have multiple of them in a function but only one executes each time the function is called. 
Something I knew from INST126 is that the return statement should be at the end of the function. 

Week 4
This week we started our unit on Classes and writing them including attributes and methods for it. 
While I was working on Week 4 excerises, I saw that some of the __init__ method had instance variables that
were not stated in the parameters. I went to ask Claude.AI about this https://claude.ai/share/13f3c9f4-1bb8-46c2-830b-e5963f7b8c38

According to Claude, there are several reasons why these attributes might not be in the parameters. 
The attributes could be calculated from the input parameters. Claude gave an example of calculating area. 
Because width and height are the input parameters, when we are assigning area, it does not need to be 
in the parameters because we do not need input from the user. 

It is derived from the parameters. Claude also stated attributes with the same value for every instance. 
For example, count would be in the parameter because it will always start at 0.

__init__ parameters should be what the user needs to provide.

Week 5
This week, I learned about protected and private attributes in the __init__ method. Before INST327, I had not used protected or private attributes or knew how to use them. To get a sense of them and how to use them in this week's exercise, I asked Claude.AI what are the differences between the two 
https://claude.ai/share/39aba95e-946b-4e73-bbd1-48d3cf4ec5d5 Protected attributes use a single _ and is intended for internal use within the class. Private attributes use the double __ and is used to prevent accidental name collisions in inheritance hierarchies.

In Python, we use getters and setters to get an attribute value and set it. I asked Claude to explain to me how to use them https://claude.ai/share/39aba95e-946b-4e73-bbd1-48d3cf4ec5d5. I learned that the getter for Python is @property. We usually use getters and setters for private/protected attributes with encapsulation and make sure we validate our values. 

Week 6
This week's topic covered classes in python and different methods such as static, class, and instance. I had previously worked with classes in Java, but did not really understand the full concept. I used Claude.AI to help me explain the differences between static and class methods https://claude.ai/share/2cd52e37-998a-4bed-a132-15d5feaf86c9 These are special types of methods that belong to the class itself and not the instance of the class. Class methods are defined as @classmethod
and use the cls parameter instead of self. 

Static methods are also defined as @staticmethod and don't receive any implicit first argument (no self or cls). Some uses for static methods are
utility functions that don't need to access class or instance data. Some differences with static and class methods:
-Class methods receive the class as the first argument and can access/modify class state
-Static methods don't receive any implicit arguments and can't access class or instance state directly





